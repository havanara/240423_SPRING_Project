package com.ezen.test.controller;

import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.request;

import java.util.List;

import org.apache.ibatis.annotations.Param;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.ezen.test.domain.BoardDTO;
import com.ezen.test.domain.BoardVO;
import com.ezen.test.domain.CommentVO;
import com.ezen.test.domain.FileVO;
import com.ezen.test.domain.PagingVO;
import com.ezen.test.handler.FileHandelr;
import com.ezen.test.handler.PagingHandler;
import com.ezen.test.service.BoardService;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

@RequestMapping("/board/*")
@Slf4j
@RequiredArgsConstructor //생성자 주입(final 처리로 고정)
@Controller
public class BoardController {
	
	private final BoardService bsv;
	private final FileHandelr fhd;
	
	@GetMapping("/register")
	public String register() {
		return "/board/register";
	}
	
	//@RequestParam("name") String name : 파라미터를 받을 때
	//required : 필수여부 false : 파라미터가 없어도 예외가 발생하지 않음
	@PostMapping("/insert")
	public String insert(BoardVO bvo, @RequestParam(name="files", required = false)MultipartFile[] files) {
		log.info(">> bvo >> {}", bvo);
		log.info(">> files >> {}", files);
		//파일 핸들러 처리
		//파일 저장처리한 다음에 fileList를 리턴
		List<FileVO> flist = null;
		
		//파일이 있을 경우에만 핸들러 호출
		if(files[0].getSize() > 0) {
			//핸들러 호출
			flist = fhd.uploadFiles(files);
			log.info(">> flist >> {}", flist);
		}
		BoardDTO bdto = new BoardDTO(bvo, flist);
		int isOK = bsv.insert(bdto);
		
//		int isOK = bsv.insert(bvo);
		return "redirect:/board/list";
	}
	
	@GetMapping("/list")
	public String list(Model m, PagingVO pgvo) { //PagingVO 파라미터가 없으면(객체가 없을수도 있잖아) 기본생성자 값이 뜸
		log.info(">> pgvo >> {} ", pgvo);

		//리턴 타입은 목적지 경로에 대한 타입(destPage가 리턴이라고 생각하면 됨)
		//Model 객체 -> request.setAttribute 역할을 하는 객체(데이터를 jsp로 가져가는 역할)
		List<BoardVO> list = bsv.getList(pgvo);
		
		int totalCount = bsv.getTotal(pgvo);
		
		PagingHandler ph = new PagingHandler(pgvo, totalCount);
		log.info(">> ph >> {} ", ph);
		
		m.addAttribute("list", list);
		m.addAttribute("ph", ph);

		return "/board/list";
	}
	
	//04/30
	@GetMapping("/count")
	public String count(@RequestParam("bno") int bno) {
		bsv.getCount(bno);
		return "/board/list";
	}
	
	//detail -> /board/detail //return /board/detail
	//modify -> /board/modify //return /board/modify
	//controller로 들어오는 경로와 jsp로 나가는 경로가 일치하면 void 처리할 수 있음(return을 굳이 안줘도 됨)
	@GetMapping({"/detail","/modify"})
	public void detail(Model m, @RequestParam("bno") int bno) {
		log.info(">> bno >> {}", bno);
//		BoardVO bvo = bsv.getDetail(bno);
		BoardDTO bdto = bsv.getDetail(bno);
		log.info(">> bdto >> {}", bdto);
//		m.addAttribute("bvo", bvo);
		m.addAttribute("bdto", bdto);
	}
	
	@PostMapping("/modify")
	//name, required files가 없을 수도 있기 때문에 없어도 괜찮다는 표기
	public String modify(BoardVO bvo, @RequestParam(name="files", required = false)MultipartFile[] files) {
		List<FileVO> flist = null; //없을 수도 있기 때문에 null로 가정
		
		//fileHandler MultipartFile[] -> flist
		if(files[0].getSize() > 0) {
			flist = fhd.uploadFiles(files);
		}
		
		BoardDTO bdto = new BoardDTO(bvo, flist);
//		log.info(">> modify bvo >> {}", bvo);
//		bsv.update(bvo);
		bsv.update(bdto);
		//board/detail.jsp로 가고싶어(새로운 데이터를 가지고 가야함, param이 필요)
		//내부에서 다시 board detail로 가세요
		return "redirect:/board/detail?bno="+bvo.getBno();
	}
	
	@GetMapping("/remove")
	public String remove(@RequestParam("bno") int bno) {
		log.info(">> bno >> {}", bno);
		bsv.delete(bno);
		return "redirect:/board/list";
	}
	
	//나가는 타입 MediaType.TEXT_PLAIN_VALUE
	@DeleteMapping(value="/{uuid}", produces = MediaType.TEXT_PLAIN_VALUE)
	public ResponseEntity<String> removeFile(@PathVariable("uuid")String uuid){
		log.info(">> uuid >> {} ", uuid);
		
		int isOK = bsv.removeFile(uuid);
		//핸들러 호출하여 파일 삭제
		
		//"1"은 body에 실을 값
		return isOK > 0? new ResponseEntity<String>("1", HttpStatus.OK) : 
			new ResponseEntity<String>("0", HttpStatus.INTERNAL_SERVER_ERROR);
	}
	
}
